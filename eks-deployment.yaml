# ----------------- Backend Deployment & Service -----------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stream-monitor-backend
  labels:
    app: stream-monitor-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stream-monitor-backend
  template:
    metadata:
      labels:
        app: stream-monitor-backend
    spec:
      containers:
      - name: backend
        image: 038462756156.dkr.ecr.us-east-1.amazonaws.com/stream-monitor-backend:latest
        ports:
        - containerPort: 5000
        # Hardcoded sensitive data (not recommended for production)
        env:
        - name: DB_PASSWORD
          value: "password"
        - name: TELEGRAM_TOKEN
          value: "8175749575:AAGWrWMrqzQkDP8bkKe3gafC42r_Ridr0gY"
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: stream-monitor-backend
spec:
  selector:
    app: stream-monitor-backend
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000

# ----------------- Frontend Deployment & Service -----------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stream-monitor-frontend
  labels:
    app: stream-monitor-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stream-monitor-frontend
  template:
    metadata:
      labels:
        app: stream-monitor-frontend
    spec:
      containers:
      - name: frontend
        image: 038462756156.dkr.ecr.us-east-1.amazonaws.com/stream-monitor-frontend:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "256Mi"
            cpu: "250m"
---
# ----------------- Frontend Service (Updated) -----------------
apiVersion: v1
kind: Service
metadata:
  name: stream-monitor-frontend
spec:
  type: NodePort
  selector:
    app: stream-monitor-frontend
  ports:
  - protocol: TCP
    port: 80          # Service port (internal cluster access)
    targetPort: 80    # Matches the containerPort of the frontend
    nodePort: 30000   # External access port (30000-32767 range)
# ----------------- Database (PostgreSQL) Deployment & Service -----------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stream-monitor-db
spec:
  serviceName: stream-monitor-db
  replicas: 1
  selector:
    matchLabels:
      app: stream-monitor-db
  template:
    metadata:
      labels:
        app: stream-monitor-db
    spec:
      containers:
      - name: postgres
        image: postgres:13
        ports:
        - containerPort: 5432
        # Hardcoded sensitive data (not recommended for production)
        env:
        - name: POSTGRES_PASSWORD
          value: "password"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      storageClassName: gp2
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: stream-monitor-db
spec:
  selector:
    app: stream-monitor-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
